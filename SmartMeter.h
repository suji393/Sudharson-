#ifndef __SMIMP_SMARTMETER_H_
#define __SMIMP_SMARTMETER_H_

#include "examples.h"
#include "Requester.h"

class SMAdapter;

namespace SMImp {

    //! Smart Meter protocol implementation.
    /*!
      Most variables have been named after their respective names given in the original research paper available [here](https://www.researchgate.net/publication/305077004_Secure_and_efficient_protection_of_consumer_privacy_in_Advanced_Metering_Infrastructure_supporting_fine-grained_data_analysis). See section 5 (Page 7) for the beginning of the protocol implementation.
    */
class SmartMeter : public Requester
{
private:
    //! Shared secrete with Utility Company for HMAC Verification.
    Integer hmacKey;
    //! Anonymous ID.
    Integer anonId;
    //! Session key shared with Trusted Thrid Party.
    Integer sessionKey;

    //! Verbose flag, used for debugging
    bool verbose;
    //! Pointer to adapter, only used for debugging
    /*!
      \sa Adapter::print(char*)
     */
    ::SMAdapter* out;

public:
    /*!
      \sa SMImp::Requester::Requester(Integer,SHA1)
    */
    SmartMeter(Integer, CryptoPP::SHA1*);
    /*!
      For debugging.
    */
    SmartMeter(Integer, ::SMAdapter*);
    SmartMeter(Integer);
    virtual ~SmartMeter();

    /*!
      Sets HMAC to be used for verification.
    */

    void setHMACKey(Integer);
    /*!
      Generates keys from payload given by Utility Company.
    */
    bool generateKeys(Payload);

    /*!
      Sets the anonymous ID
    */
    void setAnonId(Integer);
    /*!
      \sa SMImp::Requester::getAnonId()
    */
    Integer getAnonId();

    /*!
      Encrypts data to be sent to the Trusted Thrid Party.
      \param data Data to be encrypted and sent to Trusted Thrid Party.
      \return Packet of encrypted data.
    */
    Packet* sendDataToTTP(Integer data);

    /*!
      Performs all the processes to both generate and split up the session key, returning an array of packets to encasulate in the Adapter.
      \param m Message, or the session key to be generated, see SMAdaoter::startSessionKeyExchange(omnetpp::cMessage* msg).
      \param l Length of the session key, does not need to be a multiple of 4 since char('0')s (or int(48)) are padded to reach the desired length.
      \param trustedPartyId ID of the Trusted Third Party to share a session key with.
      \param trustedPartyKey Missnamed variable, this is just the first piece of the public key - specificially the component generated by the Utility Company.
      \param trustedPartyMu second peice of the public key, generated by the Trusted Third Party.
      \return Returns array of messages to be encapsulated and sent to Trusted Third Party. Array is of length (l+(4-(l%4)))/4, or ceiling(l/4) where l is the length of the session key.
    */
    Packet* sessionKeyExchange(char* m,Integer l,Integer trustedPartyId, Integer trustedPartyKey, Integer trustedPartyMu);
    
    /*!
      Used at the end of the session key exchange phase. HMAC verifies, then decrypts the final shared session key.
      \param c1 Part 1 of the encrypted session key.
      \param c2 Part 2 of the encrypted session key.
      \param ttpId ID of the Trusted Third Party.
     */
    bool recieveHMAC(Integer c1, Integer c2, Integer ttpId);
    
};

};
#endif
