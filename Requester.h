#ifndef __SMIMP_REQUESTER_H_
#define __SMIMP_REQUESTER_H_

#include "examples.h"

namespace SMImp {

//! Abstract Requester Class
/*!
  Intended to be extended by any object which utiizes Diffieâ€“Hellman key exchange 
*/
class Requester
{
private:
    /*!
      \param i ID for this particular object.
      \param s SHA1 class pointer for generating SHA1s.
     */
    void init(Integer i, SHA1* s);
    
public:
    //These should really be made private.
    
    //! Public and private keys
    KeyPair keys;
    //! Collection of parameters used for key generation.
    MasterKey params;
    //! NonblockingRng Random Number Generator for key generation
    NonblockingRng* rng;
    //! ID of the particular device, used for key generation.
    Integer id;
    //! CryptoPP::SHA1 generator class
    SHA1* shaone;

    //! Generated key segment
    Integer mu;
    //! Shared-secrete R
    Integer R;
    //! Shared session key
    Integer sessionKey;

    /*!
      function for recieving partial keys from Utility Company.
    */
    bool getPartials(Integer, Payload);

    /*!
      Calls init.
      \sa init(Integer i, SHA1* s)
    */
    Requester(Integer, SHA1*);
    /*!
      Calls init. Initilizes new SHA1 class since one isn't provided.
      \sa init(Integer i, SHA1* s)
    */
    Requester(Integer);
    ~Requester();

    /*! 
      Returns ID of the Smart Meter.
      \return ID of the Smart Meter.
    */
    Integer getId();

    /*!
      Generates keys from given key component payload from Utility Comapny
    */
    bool generateKeys(Payload);
    /*!
      \return Public key
    */
    Key getPublicKey();
    /*!
      \return Partial public key (component generated by Utility Company).
    */
    Integer getPublicPartial();
    /*!
      \return Generated piece from public key.
      \sa getPublicPartial() and getPublicKey()
    */
    Integer getPublicMu();

};

};

#endif
