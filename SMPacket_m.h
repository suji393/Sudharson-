//
// Generated file, do not edit! Created by nedtool 5.0 from SMPacket.msg.
//

#ifndef __SMART3P_SMPACKET_M_H
#define __SMART3P_SMPACKET_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0500
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif


namespace smart3p {

/**
 * Class generated from <tt>SMPacket.msg:6</tt> by nedtool.
 * <pre>
 * //
 * // Smart Meter Packet
 * //
 * packet SMPacket
 * {
 *     int id;
 *     double value;
 *     int smGateID;
 *     int collGateID;
 *     string extraInfo;
 *     string extraInfoSize;
 * }
 * </pre>
o */
class SMPacket : public ::omnetpp::cPacket
{
  protected:
    int id;
    double value;
    int smGateID;
    int collGateID;
    ::omnetpp::opp_string extraInfo;
    ::omnetpp::opp_string extraInfoSize;

  private:
    void copy(const SMPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const SMPacket&);

  public:
    SMPacket(const char *name=nullptr, int kind=0);
    SMPacket(const SMPacket& other);
    virtual ~SMPacket();
    SMPacket& operator=(const SMPacket& other);
    virtual SMPacket *dup() const {return new SMPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual int getId() const;
    virtual void setId(int id);
    virtual double getValue() const;
    virtual void setValue(double value);
    virtual int getSmGateID() const;
    virtual void setSmGateID(int smGateID);
    virtual int getCollGateID() const;
    virtual void setCollGateID(int collGateID);
    virtual const char * getExtraInfo() const;
    virtual void setExtraInfo(const char * extraInfo);
    virtual const char * getExtraInfoSize() const;
    virtual void setExtraInfoSize(const char * extraInfoSize);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const SMPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, SMPacket& obj) {obj.parsimUnpack(b);}

} // namespace smart3p

#endif // ifndef __SMART3P_SMPACKET_M_H

